{
  "_args": [
    [
      {
        "raw": "@easy-webpack/config-css@^4.0.0",
        "scope": "@easy-webpack",
        "escapedName": "@easy-webpack%2fconfig-css",
        "name": "@easy-webpack/config-css",
        "rawSpec": "^4.0.0",
        "spec": ">=4.0.0 <5.0.0",
        "type": "range"
      },
      "/home/alicina/testing/private_testing_scripts/non skele test"
    ]
  ],
  "_from": "@easy-webpack/config-css@>=4.0.0 <5.0.0",
  "_id": "@easy-webpack/config-css@4.0.2",
  "_inCache": true,
  "_location": "/@easy-webpack/config-css",
  "_nodeVersion": "6.9.5",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/config-css-4.0.2.tgz_1486577495521_0.45219399966299534"
  },
  "_npmUser": {
    "name": "easy-webpack",
    "email": "npm@invent.life"
  },
  "_npmVersion": "4.1.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@easy-webpack/config-css@^4.0.0",
    "scope": "@easy-webpack",
    "escapedName": "@easy-webpack%2fconfig-css",
    "name": "@easy-webpack/config-css",
    "rawSpec": "^4.0.0",
    "spec": ">=4.0.0 <5.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/@easy-webpack/config-css/-/config-css-4.0.2.tgz",
  "_shasum": "a6176590e5e0b2adf70a63582403d6057b26e9d3",
  "_shrinkwrap": null,
  "_spec": "@easy-webpack/config-css@^4.0.0",
  "_where": "/home/alicina/testing/private_testing_scripts/non skele test",
  "author": {
    "name": "Bazyli BrzÃ³ska",
    "email": "bazyli.brzoska@gmail.com",
    "url": "https://invent.life"
  },
  "ava": {
    "files": [
      "test/**/*.{ts,js}"
    ],
    "tap": false,
    "require": [
      "ts-node/register"
    ]
  },
  "bugs": {
    "url": "https://github.com/easy-webpack/config-css/issues"
  },
  "dependencies": {
    "css-loader": "^0.26.0",
    "extract-text-webpack-plugin": "^2.0.0-rc.3",
    "resolve-url-loader": "^1.6.0",
    "style-loader": "^0.13.1"
  },
  "description": "Easy Webpack configuration function for CSS",
  "devDependencies": {
    "@types/debug": "0.0.29",
    "@types/lodash": "^4.14.38",
    "@types/node": "^6.0.46",
    "@types/source-map": "^0.1.29",
    "@types/webpack": "^1.12.35",
    "ava": "^0.16.0",
    "greenkeeper-postpublish": "^1.0.1",
    "rimraf": "^2.5.4",
    "semantic-release": "^4.3.5",
    "ts-node": "^1.6.1",
    "tslint": "^3.15.1",
    "tslint-config-standard": "^1.5.0",
    "typescript": "^2.0.6"
  },
  "directories": {},
  "dist": {
    "shasum": "a6176590e5e0b2adf70a63582403d6057b26e9d3",
    "tarball": "https://registry.npmjs.org/@easy-webpack/config-css/-/config-css-4.0.2.tgz"
  },
  "gitHead": "63f393eca66720644c1fd5f128ca73f861746094",
  "homepage": "https://github.com/easy-webpack/config-css#readme",
  "keywords": [
    "css",
    "webpack",
    "easy",
    "configurator",
    "configuration",
    "config",
    "simple"
  ],
  "license": "MIT",
  "main": "dist/index.js",
  "maintainers": [
    {
      "name": "easy-webpack",
      "email": "npm@invent.life"
    }
  ],
  "name": "@easy-webpack/config-css",
  "optionalDependencies": {},
  "peerDependencies": {
    "@easy-webpack/core": "*"
  },
  "readme": "# @easy-webpack/config-css\nInclude and inject css using [css-loader] and [style-loader]\n\nOr emit a CSS file of all required css using [extract-text-plugin] (default behaviour)\n\n# Installation\n```\nnpm install --save-dev @easy-webpack/config-css\n```\n[easy-webpack](https://github.com/easy-webpack/core) is also required.\n\n# Usage\n```js\n// webpack.config.js\nconst generateConfig = require('@easy-webpack/core').generateConfig;\n\nconst baseConfig = { ... }; // project-specific config like the entry file\n\nmodule.exports = generateConfig(\n  baseConfig,\n\n  require('@easy-webpack/config-css')\n    ({/* Options object */ filename: 'styles.css', allChunks: true, sourceMap: false })\n);\n\n// This config will generate a CSS file named 'style.css' on output path of all required sources\n```\n\nOn any JavaScript module, simply import your css file and they will be included in output css.\n```js\n// app.js\nrequire('./style.css')  // CommonJS style import\nimport './style.css'    // ES Module import\n```\n\nRemember to include the css file in your HTML.\n\n# Options\n### extractText\nType: `boolean | ExtractTextPlugin instance | ExtractTextPlugin config object` Default: `true`\n\nToggle mode of this plugin. If this is `false`, inline mode will be used.\nNo additional CSS file will be generated and all imported css modules will be injected by [style-loader](https://github.com/webpack/style-loader).\n\nUnless you have special needs, it is not recommended to turn on inline mode because of [performance issue](https://github.com/webpack/extract-text-webpack-plugin#usage-example-with-css).\n\nYou can configure the behaviour of [extract-text-plugin] by passing [options of it](https://github.com/webpack/extract-text-webpack-plugin#api) using any of the following methods.\n\n```js\nconst generateConfig = require('@easy-webpack/core').generateConfig;\n\n// Pass in ExtractTextPlugin instance\nconst ExtractTextPlugin = require(\"extract-text-webpack-plugin\");\nvar extractText = new ExtractTextPlugin({\n  disable: false,\n    allChunks: false,\n    id: 'my-unique-id'\n}); \n\n// Pass in plain config object\nvar extractText = {\n  disable: false,\n  allChunks: false,\n  id: 'my-unique-id'\n};\n\ngenerateConfig(\n  require('@easy-webpack/config-css')\n    ({ extractText: extractText })\n)\n```\n\nNote: other options will have a higher priority on overriding extract text plugin options. \nFor example, if `extractText.allChunks` is `false` while `allChunks` on `config-css options` is `true`, the result would be `true`. \n\n### filename\nType: `string` Default: `[name].css`\n\nFilename of the extracted css file.\nSimilar to webpack's output filename, a dynamic name can be used. The following string will be substituted.\n - `[name]` the name of the chunk\n - `[id]` the number of the chunk\n - `[contenthash]` a hash of the content of the extracted file\n\n### allChunks\nType: `boolean`  Default: `false`\n\nBy default, [extract-text-plugin] only extract initial chunk(s). If this is `true`, additional chunks will also be extracted.\n\n### sourceMap\nType: `boolean` Default: `false`\n\nIf `true`, emit a [sourcemap](https://www.html5rocks.com/en/tutorials/developertools/sourcemaps/) of the CSS bundle.\n\n### resolveRelativeUrl\nType: `boolean | resolve-url-loader config object` Default: `false`\n\nIf not false, use [resolve-url-loader] to resolve relative url before [css-loader] issue require request.\n\nThis option can be an plain object containing [options for resolve-url-loader](https://github.com/bholloway/resolve-url-loader#options).\n\nIf [resolve-url-loader] is turned on, `sourceMap` will be set to `true` as the plugin requires source map to function.\n\n### additionalLoaders\nType: `string[]` Default: `[]`\n\nAdditional loaders.\n\nThis array of loaders will be pushed to the end of loader list. For instance,\n```\n(Take inline mode loader chain as example,)\nstyle-loader!css-loader!additional-loaders1!additional-loaders2\n```\n\n### test\nType: `Webpack Condition` Default: `/\\.css$/i`\n\nCondition for this config to apply. See [webpack module condition guide](https://webpack.js.org/configuration/module/#condition).\n\n# Related tutorials\n - [Webpack 1 stylesheet guide](https://webpack.github.io/docs/stylesheets.html)\n - [Webpack 2 extracting CSS from bundle](https://webpack.js.org/guides/code-splitting-css/)\n\n# Tips\n## Minify CSS\n[css-loader] have [built in minification](https://github.com/webpack/css-loader#minification) facility using [cssnano](http://cssnano.co/).\n\nMinification is highly recommended in production as it can greatly reduce chunk size and give better performance on loading.\n \nTo enable minification, you must enable minification flag on webpack.\n\nFor webpack 1, include uglifyJS plugin.\n\nFor webpack 2, include uglifyJS plugin or include a [loader-options-plugin](https://webpack.js.org/plugins/loader-options-plugin/).\n\nOr just include [config-uglify](https://github.com/easy-webpack/config-uglify).\n\n__Note on using loader-options-plugin__: You may only use this plugin once with a given test, as it will override all the options once used and can cause problems\n\n```js\nconst webpack = require('webpack');\nconst generateConfig = require('@easy-webpack/core').generateConfig;\n// webpack 1 / webpack 2\ngenerateConfig(\n  require('@easy-webpack/config-css')(),\n  {\n    plugins: [new webpack.optimize.UglifyJsPlugin()]\n  }\n);\n\n// webpack 2 only\ngenerateConfig(\n  require('@easy-webpack/config-css')(),\n  {\n    plugins: [new webpack.LoaderOptionsPlugin({\n      test: /\\.css$/,\n      minimize: true\n    })]\n  }\n);\n\n// config-uglify\ngenerateConfig(\n  require('@easy-webpack/config-css')(),\n  require('@easy-webpack/config-uglify')()\n);\n```\n\nCurrently, there is no way to pass in option to cssnano.\n\n[extract-text-plugin]: https://github.com/webpack/extract-text-webpack-plugin\n[css-loader]: https://github.com/webpack/css-loader\n[style-loader]: https://github.com/webpack/style-loader\n[resolve-url-loader]: https://github.com/bholloway/resolve-url-loader",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/easy-webpack/config-css.git"
  },
  "scripts": {
    "build": "rimraf dist && tsc -p .",
    "postpublish": "greenkeeper-postpublish",
    "semantic-release": "npm run build && semantic-release pre && npm publish --access=public && semantic-release post",
    "test": "TS_NODE_FAST=true TS_NODE_NO_PROJECT=true ava"
  },
  "typings": "dist/index.d.ts",
  "version": "4.0.2"
}
