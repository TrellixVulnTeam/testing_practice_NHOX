{
  "_args": [
    [
      {
        "raw": "wait-on@^2.0.1",
        "scope": null,
        "escapedName": "wait-on",
        "name": "wait-on",
        "rawSpec": "^2.0.1",
        "spec": ">=2.0.1 <3.0.0",
        "type": "range"
      },
      "/home/alicina/testing/private_testing_scripts/non skele test"
    ]
  ],
  "_from": "wait-on@>=2.0.1 <3.0.0",
  "_id": "wait-on@2.0.2",
  "_inCache": true,
  "_location": "/wait-on",
  "_nodeVersion": "7.5.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/wait-on-2.0.2.tgz_1487876456166_0.7497566167730838"
  },
  "_npmUser": {
    "name": "jeffbski",
    "email": "jeff.barczewski@gmail.com"
  },
  "_npmVersion": "4.1.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "wait-on@^2.0.1",
    "scope": null,
    "escapedName": "wait-on",
    "name": "wait-on",
    "rawSpec": "^2.0.1",
    "spec": ">=2.0.1 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/wait-on/-/wait-on-2.0.2.tgz",
  "_shasum": "0a84fd07024c6fc268cb0eabe585be217aaf2baa",
  "_shrinkwrap": null,
  "_spec": "wait-on@^2.0.1",
  "_where": "/home/alicina/testing/private_testing_scripts/non skele test",
  "author": {
    "name": "Jeff Barczewski",
    "email": "info@codewinds.com"
  },
  "bin": {
    "wait-on": "bin/wait-on"
  },
  "bugs": {
    "url": "http://github.com/jeffbski/wait-on/issues"
  },
  "dependencies": {
    "core-js": "^2.4.1",
    "joi": "^9.2.0",
    "minimist": "^1.2.0",
    "request": "^2.78.0",
    "rx": "^4.1.0"
  },
  "description": "wait-on is a cross platform command line utility and Node.js API which will wait for files, ports, sockets, and http(s) resources to become available",
  "devDependencies": {
    "accum": "^0.3.6",
    "expect": "^1.8.0",
    "mocha": "^3.1.2",
    "temp": "^0.8.3"
  },
  "directories": {},
  "dist": {
    "shasum": "0a84fd07024c6fc268cb0eabe585be217aaf2baa",
    "tarball": "https://registry.npmjs.org/wait-on/-/wait-on-2.0.2.tgz"
  },
  "engines": {
    "node": ">=4.0.0"
  },
  "gitHead": "7975e56dbc454df3fa2113f2688d62b187e142ae",
  "homepage": "https://github.com/jeffbski/wait-on#readme",
  "keywords": [
    "wait",
    "delay",
    "cli",
    "files",
    "tcp",
    "ports",
    "sockets",
    "http",
    "exist",
    "ready",
    "available",
    "portable",
    "cross-platform",
    "unix",
    "linux",
    "windows",
    "win32",
    "osx"
  ],
  "license": "MIT",
  "main": "lib/wait-on",
  "maintainers": [
    {
      "name": "jeffbski",
      "email": "jeff.barczewski@gmail.com"
    }
  ],
  "name": "wait-on",
  "optionalDependencies": {},
  "readme": "# wait-on - wait for files, ports, sockets, http(s) resources\n\nwait-on is a cross-platform command line utility which will wait for files, ports, sockets, and http(s) resources to become available (or not available using reverse mode). Functionality is also available via a Node.js API. Cross-platform - runs everywhere Node.js runs (linux, unix, mac OS X, windows)\n\nwait-on will wait for period of time for a file to stop growing before triggering availability which is good for monitoring files that are being built. Likewise wait-on will wait for period of time for other resources to remain available before triggering success.\n\nFor http(s) resources wait-on will check that the requests are returning 2XX (success) to HEAD or GET requests (after following any redirects).\n\nwait-on can also be used in reverse mode which waits for resources to NOT be available. This is useful in waiting for services to shutdown before continuing. (Thanks @skarbovskiy for adding this feature)\n\n[![Build Status](https://secure.travis-ci.org/jeffbski/wait-on.png?branch=master)](http://travis-ci.org/jeffbski/wait-on)\n\n## Installation\n\nRequires node.js/iojs >= 4.0.0\n\n(For older Node.js engines, use wait-on@1.5.4)\n\n```bash\nnpm install wait-on # local version\nOR\nnpm install -g wait-on # global version\n```\n\n## Usage\n\nUse from command line or using Node.js programmatic API.\n\n### CLI Usage\n\nAssuming NEXT_CMD is the command to run when resources are available, then wait-on will wait and then exit with successfull exit code (0) once all resrouces are available causing NEXT_CMD to be run.\n\nwait-on can also be used in reverse mode which waits for resources to NOT be available. This is useful in waiting for services to shutdown before continuing. (Thanks @skarbovskiy for adding)\n\nIf wait-on is interrupted before all resources are available, it will exit with non-zero exit code and thus NEXT_CMD will not be run.\n\n```bash\nwait-on file1 && NEXT_CMD # wait for file1, then exec NEXT_CMD\nwait-on f1 f2 && NEXT_CMD # wait for both f1 and f2, the exec NEXT_CMD\nwait-on http://localhost:8000/foo && NEXT_CMD # wait for http 2XX HEAD\nwait-on https://myserver/foo && NEXT_CMD # wait for https 2XX HEAD\nwait-on http-get://localhost:8000/foo && NEXT_CMD # wait for http 2XX GET\nwait-on https-get://myserver/foo && NEXT_CMD # wait for https 2XX GET\nwait-on tcp:4000 && NEXT_CMD # wait for service to listen on a TCP port\nwait-on socket:/path/mysock # wait for service to listen on domain socket\nwait-on http://unix:/var/SOCKPATH:/a/foo # wait for http HEAD on domain socket\nwait-on http-get://unix:/var/SOCKPATH:/a/foo # wait for http GET on domain socket\n```\n\n```\nUsage: wait-on {OPTIONS} resource [...resource]\n\nDescription:\n\n     wait-on is a command line utility which will wait for files, ports,\n     sockets, and http(s) resources to become available (or not available\n     using reverse flag). Exits with  success code (0) when all resources\n     are ready. Non-zero exit code if interrupted or timed out.\n\n     Options may also be specified in a config file (js or json). For\n     example --config configFile.js would result in configFile.js being\n     required and the resulting object will be merged with any\n     command line options before wait-on is called. See exampleConfig.js\n\n     In shell combine with && to conditionally run another command\n     once resources are available. ex: wait-on f1 && NEXT_CMD\n\n     resources types are defined by their prefix, if no prefix is\n     present, the resource is assumed to be of type 'file'\n\n     resource prefixes are:\n\n       file:      - regular file (also default type). ex: file:/path/to/file\n       http:      - HTTP HEAD returns 2XX response. ex: http://m.com:90/foo\n       https:     - HTTPS HEAD returns 2XX response. ex: https://my/bar\n       http-get:  - HTTP GET returns 2XX response. ex: http://m.com:90/foo\n       https-get: - HTTPS GET returns 2XX response. ex: https://my/bar\n       tcp:       - TCP port is listening. ex: 1.2.3.4:9000 or foo.com:700\n       socket:    - Domain Socket is listening. ex: socket:/path/to/sock\n                    For http over socket, use http://unix:SOCK_PATH:URL_PATH\n                    like http://unix:/path/to/sock:/foo/bar or\n                         http-get://unix:/path/to/sock:/foo/bar\n\nStandard Options:\n\n -c, --config\n\n  js or json config file, useful for http(s) options\n\n -d, --delay\n\n  Initial delay before checking for resources in ms, default 0\n\n -i, --interval\n\n  Interval to poll resources in ms, default 250ms\n\n -l, --log\n\n  Log resources begin waited on and when complete or errored\n\n -r, --reverse\n\n  Reverse operation, wait for resources to NOT be available\n\n -t, --timeout\n\n  Maximum time in ms to wait before exiting with failure (1) code,\n  default Infinity\n\n -v, --verbose\n\n  Enable debug output to stdout\n\n -w, --window\n\n  Stability window, the time in ms defining the window of time that\n  resource needs to have not changed (file size or availability) before\n  signalling success, default 750ms. If less than interval, it will be\n  reset to the value of interval.\n\n -h, --help\n\n  Show this message\n```\n\n### Node.js API usage\n\n```javascript\nvar waitOn = require('wait-on');\nvar opts = {\n  resources: [\n    'file1',\n    'http://foo.com:8000/bar',\n    'https://my.com/cat',\n    'http-get://foo.com:8000/bar',\n    'https-get://my.com/cat',\n    'tcp:foo.com:8000',\n    'socket:/my/sock',\n    'http://unix:/my/sock:/my/url',\n    'http-get://unix:/my/sock:/my/url'\n  ],\n  delay: 1000, // initial delay in ms, default 0\n  interval: 100, // poll interval in ms, default 250ms\n  timeout: 30000, // timeout in ms, default Infinity\n  window: 1000, // stabilization time in ms, default 750ms\n\n  // http options\n  ca: [ /* strings or binaries */ ],\n  cert: [ /* strings or binaries */ ],\n  key: [ /* strings or binaries */ ],\n  passphrase: 'yourpassphrase',\n  auth: {\n    user: 'theuser', // or username\n    pass: 'thepassword' // or password\n  },\n  httpSignature: {\n    keyId: 'yourKeyId',\n    key: 'yourKey'\n  },\n  strictSSL: false,\n  followAllRedirects: true,\n  followRedirect: true\n};\nwaitOn(opts, function (err) {\n  if (err) { return handleError(err); }\n  // once here, all resources are available\n});\n```\n\nwaitOn(opts, cb) - function which triggers resource checks\n\n - opts.resources - array of string resources to wait for. prefix determines the type of resource with the default type of `file:`\n - opts.delay - optional initial delay in ms, default 0\n - opts.interval - optional poll resource interval in ms, default 250ms\n - opts.log - optional flag which outputs to stdout, remaining resources waited on and when complete or errored\n - opts.reverse - optional flag to reverse operation so checks are for resources being NOT available, default false\n - opts.timeout - optional timeout in ms, default Infinity. Aborts with error.\n - opts.verbose - optional flag which outputs debug output, default false\n - opts.window - optional stabilization time in ms, default 750ms. Waits this amount of time for file sizes to stabilize or other resource availability to remain unchanged.\n - http(s) specific options, see https://github.com/request/request#readme for specific details\n   - opts.ca: [ /* strings or binaries */ ],\n   - opts.cert: [ /* strings or binaries */ ],\n   - opts.key: [ /* strings or binaries */ ],\n   - opts.passphrase: 'yourpassphrase',\n   - opts.auth: { user, pass }\n   - opts.httpSignature: { keyId, key }\n   - opts.strictSSL: false,\n   - opts.followAllRedirects: true,\n   - opts.followRedirect: true\n\n - cb(err) - if err is provided then, resource checks did not succeed\n\n\n## Goals\n\n - simple command line utility and Node.js API for waiting for resources\n - wait for files to stabilize\n - wait for http(s) resources to return 2XX in response to HEAD request\n - wait for http(s) resources to return 2XX in response to GET request\n - wait for services to be listening on tcp ports\n - wait for services to be listening on unix domain sockets\n - configurable initial delay, poll interval, stabilization window, timeout\n - command line utility returns success code (0) when resources are availble\n - command line utility that can also wait for resources to not be available using reverse flag. This is useful for waiting for services to shutdown before continuing.\n - cross platform - runs anywhere Node.js runs (linux, unix, mac OS X, windows)\n\n## Why\n\nI frequently need to wait on build tasks to complete or services to be available before starting next command, so this project makes that easier and is portable to everywhere Node.js runs.\n\n## Get involved\n\nIf you have input or ideas or would like to get involved, you may:\n\n - contact me via twitter @jeffbski  - <http://twitter.com/jeffbski>\n - open an issue on github to begin a discussion - <https://github.com/jeffbski/wait-on/issues>\n - fork the repo and send a pull request (ideally with tests) - <https://github.com/jeffbski/wait-on>\n\n## License\n\n - [MIT license](http://github.com/jeffbski/wait-on/raw/master/LICENSE)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/jeffbski/wait-on.git"
  },
  "scripts": {
    "test": "mocha 'test/**/*.mocha.js'"
  },
  "version": "2.0.2"
}
