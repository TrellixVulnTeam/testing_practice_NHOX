Going through w3 schools tutoria;

fs is for file operations:

Read files
Create files
Update files
Delete files
Rename files


req stands for request

res stands for response




fs.rename is really exact?/upload demo problems
  It works fine in fileserver/demo.js
  but

        if new path is './'
          Error: EXDEV: cross-device link not permitted, rename '/tmp/upload_294935d4739777d20c1d0f7761c5de42' -> './Scarlet Tanager b57-5-230_V.jpg'

        or

        var newpath = '' + files.filetoupload.name;

          Error: EXDEV: cross-device link not permitted, rename '/tmp/upload_878d9187bc59fa922aa8d5a1435464bf' -> 'Untitled_0026_by_Mike_Sinko-1600.jpg'

        var newpath = '/' + files.filetoupload.name;

          Error: EACCES: permission denied, rename '/tmp/upload_fb50e4203246eab99f398f7c3284a50f' -> '/The_Sky_Is_The_Limit_by_Kaushik_Panchal-1600.jpg'


    Why is the path exact here?


Maybe later: https://scotch.io/tutorials/use-expressjs-to-deliver-html-files

Look over:
  https://nodejs.org/api/process.html#process_process

https://blog.logentries.com/2015/10/unleash-the-power-of-node-js-for-shell-scripting-part-1/
  Running node directly

      #!/usr/bin/env node
      ^in the beginning of file name

      chmod +x scriptname.js
      ./scriptname.js

      ^this doesn't work

      Error:
        /user/bin/env: bad interpreter: No such file or directory

  You can still pipe stuff tho, just not execute scripts by themselves? weird

  process.argv
    https://nodejs.org/docs/latest/api/process.html#process_process_argv

    https://github.com/indexzero/nconf
    This is supposed to be useful for arguments and stuff too

  ./commanderdemo.js help
  does the same as
  ./commanderdemo.js

  *GOTTA USE

  ./commanderdemo.js --help

  also executing it works again


  This is interesting:
  http://ricostacruz.com/cheatsheets/jshint.html



  "
    Here is a list of the ones that I like and use regularly:

    lodash
    Request
    Cheerio
    csv
    async
    and even the very usefull shellJs
  "


  Is there a way to make async methods to sync ones? Or at least write em in
  that fashion? Do I always have to nest everything that's async?

          https://www.pincer.io/npm/libraries/ggo
          http://know.cujojs.com/tutorials/async/simplifying-async-with-promises
          https://carrot.is/coding/asynchrony-in-javascript.html
          http://stackabuse.com/avoiding-callback-hell-in-node-js/
